{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\mehat\\\\Desktop\\\\PMT\\\\frontend\\\\src\\\\components\\\\auth\\\\AuthContext.js\",\n    _s = $RefreshSig$();\n\nimport { createContext, useState, useEffect, useCallback } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(localStorage.getItem('token')); // Set or remove the Authorization header for axios\n\n  useEffect(() => {\n    if (token) {\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\n      fetchUserData(); // Fetch user data after setting the token\n    } else {\n      delete axios.defaults.headers.common['Authorization'];\n      setUser(null); // Clear user data when token is removed\n    }\n  }, [token]); // Fetch user data from the server\n\n  const fetchUserData = useCallback(async () => {\n    try {\n      const response = await axios.get('/api/user'); // Replace with your API endpoint\n\n      setUser(response.data); // Store the full user object\n    } catch (error) {\n      console.error('Failed to fetch user data:', error);\n      logout(); // Logout if the token is invalid or expired\n    }\n  }, []); // Login function\n\n  const login = async (token, userId) => {\n    try {\n      setToken(token);\n      localStorage.setItem('token', token);\n      await fetchUserData(); // Fetch user data after login\n    } catch (error) {\n      console.error('Login failed:', error);\n      throw error; // Propagate the error to the caller\n    }\n  }; // Logout function\n\n\n  const logout = () => {\n    setToken(null);\n    setUser(null);\n    localStorage.removeItem('token');\n  }; // Check token expiry (optional)\n\n\n  const isTokenExpired = token => {\n    try {\n      const payload = JSON.parse(atob(token.split('.')[1])); // Decode the token payload\n\n      return payload.exp * 1000 < Date.now(); // Check if the token is expired\n    } catch (error) {\n      console.error('Failed to decode token:', error);\n      return true; // Assume the token is invalid if decoding fails\n    }\n  }; // Check token expiry on app load\n\n\n  useEffect(() => {\n    if (token && isTokenExpired(token)) {\n      logout(); // Logout if the token is expired\n    }\n  }, [token]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AuthProvider, \"iShVXfx5DcrcpFkUty1n+dMI4MY=\");\n\n_c = AuthProvider;\nexport default AuthContext;\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["createContext","useState","useEffect","useCallback","axios","AuthContext","AuthProvider","children","user","setUser","token","setToken","localStorage","getItem","defaults","headers","common","fetchUserData","response","get","data","error","console","logout","login","userId","setItem","removeItem","isTokenExpired","payload","JSON","parse","atob","split","exp","Date","now"],"sources":["C:/Users/mehat/Desktop/PMT/frontend/src/components/auth/AuthContext.js"],"sourcesContent":["import { createContext, useState, useEffect, useCallback } from 'react';\r\nimport axios from 'axios';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [token, setToken] = useState(localStorage.getItem('token'));\r\n\r\n  // Set or remove the Authorization header for axios\r\n  useEffect(() => {\r\n    if (token) {\r\n      axios.defaults.headers.common['Authorization'] = `Bearer ${token}`;\r\n      fetchUserData(); // Fetch user data after setting the token\r\n    } else {\r\n      delete axios.defaults.headers.common['Authorization'];\r\n      setUser(null); // Clear user data when token is removed\r\n    }\r\n  }, [token]);\r\n\r\n  // Fetch user data from the server\r\n  const fetchUserData = useCallback(async () => {\r\n    try {\r\n      const response = await axios.get('/api/user'); // Replace with your API endpoint\r\n      setUser(response.data); // Store the full user object\r\n    } catch (error) {\r\n      console.error('Failed to fetch user data:', error);\r\n      logout(); // Logout if the token is invalid or expired\r\n    }\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (token, userId) => {\r\n    try {\r\n      setToken(token);\r\n      localStorage.setItem('token', token);\r\n      await fetchUserData(); // Fetch user data after login\r\n    } catch (error) {\r\n      console.error('Login failed:', error);\r\n      throw error; // Propagate the error to the caller\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = () => {\r\n    setToken(null);\r\n    setUser(null);\r\n    localStorage.removeItem('token');\r\n  };\r\n\r\n  // Check token expiry (optional)\r\n  const isTokenExpired = (token) => {\r\n    try {\r\n      const payload = JSON.parse(atob(token.split('.')[1])); // Decode the token payload\r\n      return payload.exp * 1000 < Date.now(); // Check if the token is expired\r\n    } catch (error) {\r\n      console.error('Failed to decode token:', error);\r\n      return true; // Assume the token is invalid if decoding fails\r\n    }\r\n  };\r\n\r\n  // Check token expiry on app load\r\n  useEffect(() => {\r\n    if (token && isTokenExpired(token)) {\r\n      logout(); // Logout if the token is expired\r\n    }\r\n  }, [token]);\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, logout }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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"},"metadata":{},"sourceType":"module"}